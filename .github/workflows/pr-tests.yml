name: PR Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  test-go:
    name: Go Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: go mod download
      
    - name: Run Go tests
      run: make test
      
    - name: Run Go tests with coverage
      run: make test-coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: go-backend
        name: go-backend-coverage
        fail_ci_if_error: false
        
    - name: Format check
      run: make fmt && git diff --exit-code
      
    - name: Lint check
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        make lint

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ui
      run: npm install
      
    - name: Run frontend linting
      working-directory: ui
      run: npm run lint
      
    - name: Check frontend formatting
      working-directory: ui
      run: npm run format:check
      
    - name: Run frontend tests
      working-directory: ui
      run: npm run test:ci
      
    - name: Build frontend
      working-directory: ui
      run: npm run build
      
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v4
      with:
        directory: ui/coverage
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: go mod download
      
    - name: Build application (backend only)
      run: make build-backend
      
    - name: Run integration tests
      run: go test -v ./integration/...

  test-docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: make docker-build
      
    - name: Test Docker image
      run: |
        docker run --rm -d --name lawrence-test -p 8080:8080 -p 4317:4317 -p 4318:4318 lawrence-oss:latest
        sleep 10
        # Test if the service is responding
        curl -f http://localhost:8080/api/v1/health || exit 1
        docker stop lawrence-test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        
    - name: Run Trivy vulnerability scanner (SARIF)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test-go, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Install dependencies
      run: |
        go mod download
        cd ui && npm install
        
    - name: Build full application
      run: make build
      
    - name: Verify binary exists
      run: test -f bin/lawrence
      
    - name: Test binary version
      run: ./bin/lawrence --help